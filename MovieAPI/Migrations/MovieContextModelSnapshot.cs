// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Data;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(MovieContext))]
    partial class MovieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieAPI.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Romance"
                        });
                });

            modelBuilder.Entity("MovieAPI.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 1,
                            Name = "Shadow Realm",
                            Price = 9.49m,
                            ReleaseDate = new DateOnly(2021, 10, 15)
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 2,
                            Name = "Echoes of Tomorrow",
                            Price = 7.99m,
                            ReleaseDate = new DateOnly(2022, 5, 20)
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 3,
                            Name = "Digital Drift",
                            Price = 11.50m,
                            ReleaseDate = new DateOnly(2023, 3, 8)
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 1,
                            Name = "Crimson Sky",
                            Price = 10.00m,
                            ReleaseDate = new DateOnly(2020, 12, 25)
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 4,
                            Name = "Neon Mirage",
                            Price = 8.75m,
                            ReleaseDate = new DateOnly(2019, 8, 3)
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 5,
                            Name = "Steel Pulse",
                            Price = 6.99m,
                            ReleaseDate = new DateOnly(2021, 2, 14)
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 2,
                            Name = "Quantum Loop",
                            Price = 12.00m,
                            ReleaseDate = new DateOnly(2024, 6, 30)
                        },
                        new
                        {
                            Id = 8,
                            GenreId = 3,
                            Name = "Frozen Code",
                            Price = 9.99m,
                            ReleaseDate = new DateOnly(2020, 11, 5)
                        });
                });

            modelBuilder.Entity("MovieAPI.Entities.Movie", b =>
                {
                    b.HasOne("MovieAPI.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
